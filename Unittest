import unittest
from io import StringIO  
from wordle_game import WordManager, Word
from unittest.mock import patch 

class TestWordManager(unittest.TestCase):
    
    def setUp(self):
        self.word_manager = WordManager()
    
    def test_is_word_exist_existing_word(self):
        existing_word = self.word_manager._WordManager__words[0].simple_word
        self.assertTrue(self.word_manager.is_word_exist(existing_word))
    
    def test_is_word_exist_non_existing_word(self):
        non_existing_word = "nonexistent"
        self.assertFalse(self.word_manager.is_word_exist(non_existing_word))
    
    def test_display_all_words(self):
        with unittest.mock.patch('sys.stdout', new=StringIO()) as captured_output:
            self.word_manager.display_all_words()
            printed_output = captured_output.getvalue().strip()

        self.assertTrue(all("\033[33m" in word for word in printed_output.split("\n")))
    
    def test_secret_word(self):
        secret_word = self.word_manager.secret_word()
        self.assertIsInstance(secret_word, str)

class TestWord(unittest.TestCase):
    
    def test_word_property(self):
        word = Word("test", "\033[33m")
        self.assertEqual(word.word, "\033[33mtest")
    
    def test_simple_word_property(self):
        word = Word("test", "\033[33m")
        self.assertEqual(word.simple_word, "test")

if __name__ == '__main__':
    unittest.main()