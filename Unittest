import unittest
from unittest.mock import patch
from game import Game
from wordmanager import WordManager
from wordmanager_factory import WordManagerFactory
from word import Word


class TestGame(unittest.TestCase):
    def setUp(self):
        self.word_manager_factory = WordManagerFactory()
        self.word_manager = WordManager(["test_word"] * 5)
        self.game = Game(3, self.word_manager)

    @patch('builtins.input', side_effect=['test_word'])
    def test_guess_secret_word_correctly(self, mock_input):
        self.assertEqual(self.game.play(), "\033[32mCongratulations! You've guessed the secret word correctly.\033[0m")

    @patch('builtins.input', side_effect=['wrong_word'] * 3)
    def test_out_of_attempts_lost(self, mock_input):
        self.assertEqual(self.game.play(), "\033[31mOut of attempts! You lost!\033[0m")

    @patch('builtins.input', side_effect=['!@#'])
    def test_invalid_guess(self, mock_input):
        self.assertEqual(self.game.play(), "Please enter English letters only.")

    @patch('builtins.input', side_effect=['wrong_word'] * 2 + ['test_word'])
    def test_wrong_guess(self, mock_input):
        self.assertEqual(self.game.play(), "Wrong guess! 1 attempts left.")

    def test_word_display(self):
        self.assertEqual(self.word_manager.display_all_words(), None)


if __name__ == '__main__':
    unittest.main()
